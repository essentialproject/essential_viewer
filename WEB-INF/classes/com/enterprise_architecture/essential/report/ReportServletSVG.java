/** Copyright (c)2008-2012 Enterprise Architecture Solutions ltd.
 * This file is part of Essential Architecture Manager, 
 * the Essential Architecture Meta Model and The Essential Project.
 *
 * Essential Architecture Manager is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Essential Architecture Manager is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Essential Architecture Manager.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * 13.11.2008	JWC	First coding
 * 10.11.2011	JWC Re-factored to improve error handling.
 * 14.11.2011	JWC v3.0 Added support for cache-ing the XML Source document
 * 17.01.2012	JWC Re-worked to use the Essential Viewer Engine
 * 14.06.2012	JWC/NW Explicitly set character coding in response to specified parameter (e.g. UTF-8)
 * 					to fix unicode character rendering problems.
 * 
 */
package com.enterprise_architecture.essential.report;

import java.io.IOException;
import java.io.StringWriter;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet to transform XSLT that create SVG documents.
 * Does not use the breadcrumb capability in ReportServlet but sets content
 * type to 'image/svg+xml' to ensure smooth incorporation of SVG images in hosting page and removes
 * the XML declaration in the first line of the document.
 * <br>
 * Servlet expects the following request parameters
 * Servlet expects the following request parameters
 * <ul>
 * <li>XML - the name of the Essential repository snap-shot XML</li>
 * <li>XSL - the name of the XSL file that defines the report to run</li>
 * <li>LABEL - a textual string describing the page that is being rendered and used by the Page History
 * functionality. Typically, when defining a link this is the label of the page that is being linked to.</li>
 * <li>PMA - the instance ID of the repository element that is being reported on</li>
 * <li>PMA2 - <i>Optional.</i> Used by some reports to control hiding/unhiding of items on the report and available for use
 * as required by reports</li>
 * <li>PMA3, PMA4 - <i>Optional.</i> Additional optional parameters available for use by reports as required.</li>
 * <li>CT - <i>Optional.</i> The Content Type that should be used in the response from the Servlet. For an Excel file response use application/ms-excel
 * <li>FILE - <i>Optional, but if CT is used, required</i>. The name of the output file that the response will display in the browser's download dialog, e.g. myReport.xls
 * <li>an optional, user-defined set of name/value pairs using the HTTP GET format, e.g. name1=value1&name2=value2 
 * </ul>
 * <br>
 * The selected View Template / Report has the following parameters available to use in the XSL:
 * <ul>
 * <li>param1 - the instance ID of the instance in focus for the View / Report.</li>
 * <li>param2 - if specified in the client request, a reserved parameter name that can contain any value required by the View / Report. </li>
 * <li>param3 - if specified in the client request, a reserved parameter name that can contain any value required by the View / Report. </li>
 * <li>param4 - if specified in the client request, a reserved parameter name that can contain any value required by the View / Report. </li>
 * <li>reposXML - the name of the XML document that is holding the Essential repository snapshot that should be used for queries.</li>
 * <li>theURLPrefix - the full URL prefix of the Servlet that can be used to define full-path hyperlinks. e.g. 'http://localhost:8080/essential_viewer/'</li>
 * <li>A set of user-defined parameters, set as per the contents of theUserParams in the request. These parameters are defined using HTTP GET request 
 * parameters, e.g. name1=value1&name2=value2 will provide parameters 'name1' and 'name2' to the View / Report.</li>
 * </ul>
 * <br/>
 * On error, the following parameters are sent to the stylesheet defined by the 'theErrorView' init-param in web.xml.
 * The names of the parameters are defined by the CONSTANT VALUES.
 * <ul>
 * <li>THE_MESSAGE_PARAM (theMessage) - the error message generated by the exception handlers in this class as a String.</li>
 * <li>THE_STACK_TRACE_PARAM (theStackTrace) - the full stack trace of the exception that was raised as a String</li>
 * <li>THE_TRANSFORMER_MESSAGE_PARAM (theTransformerError) - the error message caught by the ErrorListeners of this class as a String.</li>
 * </ul>
 * The intention is that this servlet should be called to deliver an SVG object that
 * is defined in the page of an HTML object, e.g.:
 * <br>
 * <pre>
 * &lt;xsl:text disable-output-escaping="yes"&gt;
 * &lt;![CDATA[
 * &lt;object data="reportSVG?XML=reportXML.xml&XSL=technology/core_tech_opsys_summary_graphic.xsl"
 * height="800" width="800" type="image/svg+xml" /&gt;
 * ]]&gt;
 * &lt;/xsl:text&gt;
 * </pre>
 * @author Jonathan Carter <info@enterprise-architecture.com>
 * @version 3.0
 * @see com.enterprise_architecture.essential.report.ReportServlet ReportServlet
 */
public class ReportServletSVG extends ReportServlet implements Servlet 
{

	/**
	 * Default constructor. No further action taken in here.
	 */
	public ReportServletSVG() 
	{
		super();
	}   
	
	/**
	 * Initialise the servlet. Nothing beyond super class behaviour.
	 * @see javax.servlet.GenericServlet#init()
	 */
	public void init() throws ServletException 
	{
		
		super.init();
	}   
	
	/**
	 * Receive the request to render the SVG document.
	 * 
	 * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{	
		response.setHeader("Cache-Control","no-cache"); //HTTP 1.1
		response.setHeader("Pragma","no-cache"); //HTTP 1.0
		response.setDateHeader ("Expires", 0); //prevents caching at the proxy server
		
		// Set the content type for SVG
		response.setContentType("image/svg+xml");
		
		// 14.06.2012 - JWC/NW set the character encoding of the output
		response.setCharacterEncoding(getServletContext().getInitParameter("defaultCharacterEncoding"));
		
		// NEW VIEWER ENGINE CODE
		StringWriter aResultXML = new StringWriter();
		EssentialViewerEngine anEngine = new EssentialViewerEngine(getServletContext(), false);
		boolean isSuccess = anEngine.generateView(request, response, aResultXML);
		if(isSuccess)
		{		
			// Strip the XML declaration from the XML returned from the transform
			String aCleanXML = aResultXML.toString();
			int endPoint = aCleanXML.indexOf("?>");
			StringBuffer aCleanXMLBuffer = new StringBuffer(aCleanXML);
			StringBuffer aCleanXMLBufferResult = aCleanXMLBuffer.replace(0, (endPoint + 2), "");
			response.getOutputStream().write(aCleanXMLBufferResult.toString().getBytes());
		}
		// END OF VIEWER ENGINE CODE
	}
}
